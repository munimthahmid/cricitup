
-- THIS FUNCTION IS UPDATED *************8
CREATE OR REPLACE PROCEDURE Rating_Update IS 

run1 NUMBER:=0;
run2 NUMBER :=0;
winner NUMBER;
looser NUMBER;

BEGIN
FOR M IN (SELECT MATCH_ID,TEAM1_ID,TEAM2_ID FROM MATCH)
LOOP
	
	SELECT SUM(TOTAL_RUNS) INTO run1 FROM SCORECARD WHERE MATCH_ID=M.MATCH_ID
	AND PLAYER_ID IN (SELECT PLAYERID FROM PLAYER WHERE TEAM_ID=M.TEAM1_ID);
	
	SELECT SUM(TOTAL_RUNS) INTO run2 FROM SCORECARD WHERE MATCH_ID=M.MATCH_ID
	AND PLAYER_ID IN (SELECT PLAYERID FROM PLAYER WHERE TEAM_ID=M.TEAM2_ID);
	IF run1 IS NOT NULL AND run2 IS NOT NULL THEN 
		IF run1 >run2 THEN 
		winner:=M.TEAM1_ID;
		looser:=M.TEAM2_ID;
		ELSE 
		winner :=M.TEAM2_ID;
		looser :=M.TEAM1_ID;
		END IF;
	
		UPDATE TEAM_STATS
		SET NOOFWINS=NVL(NOOFWINS,0)+1,
		POINTSSOFAR=NVL(POINTSSOFAR,0)+2
		WHERE TEAM_ID=winner;
		UPDATE TEAM_STATS
		SET NOOFLOSSES=NVL(NOOFLOSSES,0)+1,
		POINTSSOFAR=NVL(POINTSSOFAR,0)-1
		WHERE TEAM_ID=looser;
		UPDATE MATCH 
		SET WINNER=winner
		WHERE MATCH_ID=M.MATCH_ID;
-- 	
		UPDATE TEAM 
		SET TEAM_RATING=TEAM_RATING+2
		WHERE TEAM_ID=winner;
	
		UPDATE TEAM 
		SET TEAM_RATING=TEAM_RATING-1
		WHERE TEAM_ID=looser;
	END IF;
	
END LOOP;

END;
BEGIN
RESET_RATING;
end;

BEGIN 
RATING_UPDATE;
END;


CREATE OR REPLACE PROCEDURE RESET_RATING IS 

BEGIN

UPDATE TEAM 
SET TEAM_RATING=0;
DELETE FROM TEAM_STATS;
INSERT INTO TEAM_STATS(STATID,TEAM_ID)
SELECT TEAM_ID,TEAM_ID FROM TEAM;
END;
/

-- STAT OF VENUE PROCEDURE

CREATE OR REPLACE PROCEDURE STAT_OF_VENUE(VENUEID IN  NUMBER,highestrun OUT NUMBER,highestwicket OUT NUMBER,highestsix OUT NUMBER,highestfour OUT NUMBER,highestcatch OUT NUMBER) IS 
venue NUMBER;

playerexists NUMBER:=0;
BEGIN
venue:=VENUEID;
FOR R IN (SELECT MATCH_ID FROM MATCH WHERE VENUE_ID=venue)
LOOP 
FOR S IN (SELECT PLAYER_ID,TAKEN_WICKETS,TOTAL_RUNS,TOTAL_SIXES_HIT,TOTAL_FOURS_HIT,TOTAL_CATCHES_TAKEN FROM SCORECARD WHERE MATCH_ID=R.MATCH_ID)
LOOP 
SELECT COUNT(*) INTO playerexists FROM PLAYER_VENUE WHERE 
PLAYERID=S.PLAYER_ID;
IF playerexists=1 THEN 
UPDATE PLAYER_VENUE 
SET RUN=RUN+S.TOTAL_RUNS,
		WICKET=WICKET+S.TAKEN_WICKETS,
		SIX=SIX+S.TOTAL_SIXES_HIT,
		FOUR=FOUR+S.TOTAL_FOURS_HIT,
		CATCH=CATCH+S.TOTAL_CATCHES_TAKEN
		WHERE PLAYERID=S.PLAYER_ID;
ELSE 
INSERT INTO PLAYER_VENUE(PLAYERID,RUN,WICKET,SIX,FOUR,CATCH) 
VALUES(S.PLAYER_ID,S.TOTAL_RUNS,S.TAKEN_WICKETS,S.TOTAL_SIXES_HIT,S.TOTAL_FOURS_HIT,S.TOTAL_CATCHES_TAKEN);
END IF;


END LOOP;

END LOOP;

SELECT PLAYERID INTO highestrun 
FROM PLAYER_VENUE
WHERE RUN =(SELECT MAX(RUN) FROM PLAYER_VENUE)
AND ROWNUM <= 1;
DBMS_OUTPUT.PUT_LINE(highestrun);


SELECT PLAYERID INTO highestwicket 
FROM PLAYER_VENUE
WHERE WICKET =(SELECT MAX(WICKET) FROM PLAYER_VENUE)
AND ROWNUM <= 1;


SELECT PLAYERID INTO highestsix 
FROM PLAYER_VENUE
WHERE SIX =(SELECT MAX(SIX) FROM PLAYER_VENUE)
AND ROWNUM <= 1;


SELECT PLAYERID INTO highestfour 
FROM PLAYER_VENUE
WHERE FOUR =(SELECT MAX(FOUR) FROM PLAYER_VENUE)
AND ROWNUM <= 1;


SELECT PLAYERID INTO highestcatch 
FROM PLAYER_VENUE
WHERE CATCH =(SELECT MAX(CATCH) FROM PLAYER_VENUE)
AND ROWNUM <= 1;

END;
/